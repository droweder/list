-- Supabase setup script for Meu Mercadinâ„¢

-- 1. Create the table to store shopping lists
CREATE TABLE public.shopping_lists (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz DEFAULT now() NOT NULL,
  name text,
  items jsonb,
  members jsonb,
  -- Optional: Add a user_id foreign key if you want to link lists to a specific owner
  user_id uuid REFERENCES auth.users(id)
);

-- 2. Enable Row Level Security (RLS)
-- This ensures that users can only access data they are permitted to.
ALTER TABLE public.shopping_lists ENABLE ROW LEVEL SECURITY;

-- 3. Create a policy to allow authenticated users to create new lists
CREATE POLICY "Allow insert for authenticated users"
ON public.shopping_lists
FOR INSERT TO authenticated
WITH CHECK (true);

-- 4. Create a policy to allow members of a list to view it
-- This policy checks if the authenticated user's ID is present in the 'members' JSONB array.
-- Note: This assumes the user's ID is stored in the 'id' field within the JSON object.
-- Supabase's auth.uid() returns a UUID, so we cast it to text for comparison.
CREATE POLICY "Allow select for members"
ON public.shopping_lists
FOR SELECT TO authenticated USING (
  EXISTS (
    SELECT 1
    FROM jsonb_array_elements(members) AS elem
    WHERE elem->>'id' = auth.uid()::text
  )
);

-- 5. Create a policy to allow members of a list to update it
CREATE POLICY "Allow update for members"
ON public.shopping_lists
FOR UPDATE TO authenticated USING (
  EXISTS (
    SELECT 1
    FROM jsonb_array_elements(members) AS elem
    WHERE elem->>'id' = auth.uid()::text
  )
);

-- 6. Create a policy to allow members of a list to delete it
CREATE POLICY "Allow delete for members"
ON public.shopping_lists
FOR DELETE TO authenticated USING (
  EXISTS (
    SELECT 1
    FROM jsonb_array_elements(members) AS elem
    WHERE elem->>'id' = auth.uid()::text
  )
);
