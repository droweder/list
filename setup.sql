-- Supabase setup script for Meu Mercadinâ„¢

-- =============================================================================
-- == CONFIGURATION SCRIPT
-- == Run this full script to set up all tables and policies.
-- =============================================================================

-- 1. Create the table to store shopping lists
CREATE TABLE public.shopping_lists (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz DEFAULT now() NOT NULL,
  name text,
  items jsonb,
  members jsonb,
  user_id uuid REFERENCES auth.users(id)
);

-- 2. Enable Row Level Security (RLS) for shopping_lists
ALTER TABLE public.shopping_lists ENABLE ROW LEVEL SECURITY;

-- 3. Policies for shopping_lists
CREATE POLICY "Allow insert for authenticated users" ON public.shopping_lists FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow select for members" ON public.shopping_lists FOR SELECT TO authenticated USING (EXISTS (SELECT 1 FROM jsonb_array_elements(members) AS elem WHERE elem->>'id' = auth.uid()::text));
CREATE POLICY "Allow update for members" ON public.shopping_lists FOR UPDATE TO authenticated USING (EXISTS (SELECT 1 FROM jsonb_array_elements(members) AS elem WHERE elem->>'id' = auth.uid()::text));
CREATE POLICY "Allow delete for members" ON public.shopping_lists FOR DELETE TO authenticated USING (EXISTS (SELECT 1 FROM jsonb_array_elements(members) AS elem WHERE elem->>'id' = auth.uid()::text));

-- 4. Create the table for categories
CREATE TABLE public.categories (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  user_id uuid DEFAULT auth.uid() REFERENCES auth.users(id)
);

-- 5. Enable RLS for categories
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

-- 6. Policies for categories
CREATE POLICY "Allow read for authenticated users" ON public.categories FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow insert for authenticated users" ON public.categories FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow update for owners" ON public.categories FOR UPDATE USING (user_id = auth.uid());
CREATE POLICY "Allow delete for owners" ON public.categories FOR DELETE USING (user_id = auth.uid());

-- 7. Create the table for preset products
CREATE TABLE public.products (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  category text,
  unit text,
  user_id uuid DEFAULT auth.uid() REFERENCES auth.users(id)
);

-- 8. Enable RLS for products
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;

-- 9. Policies for products
CREATE POLICY "Allow read for authenticated users" ON public.products FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow insert for authenticated users" ON public.products FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow update for owners" ON public.products FOR UPDATE USING (user_id = auth.uid());
CREATE POLICY "Allow delete for owners" ON public.products FOR DELETE USING (user_id = auth.uid());


-- =============================================================================
-- == VERIFICATION SCRIPT
-- == Run this script to check if the tables and policies were created correctly.
-- == This script is read-only and does not make any changes.
-- =============================================================================

-- Part 1: Verify Tables and RLS Status
-- Should list the 3 tables and confirm that RLS is "Enabled" for all.
SELECT
    c.relname AS table_name,
    CASE WHEN c.relrowsecurity THEN 'Enabled' ELSE 'Disabled' END AS rls_status
FROM
    pg_catalog.pg_class c
JOIN
    pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE
    n.nspname = 'public' AND c.relkind = 'r' -- 'r' for regular tables
    AND c.relname IN ('shopping_lists', 'categories', 'products')
ORDER BY
    c.relname;

-- Part 2: List all applied Security Policies
-- Should list all the policies we created, showing which table
-- they apply to and for which command (SELECT, INSERT, etc.).
SELECT
    policyname AS policy_name,
    schemaname AS schema_name,
    tablename AS table_name,
    cmd AS command,
    qual AS using_clause,
    with_check AS with_check_clause
FROM
    pg_policies
WHERE
    schemaname = 'public'
    AND tablename IN ('shopping_lists', 'categories', 'products')
ORDER BY
    table_name, policy_name;
